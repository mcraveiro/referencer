// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _LIBSEXYMM_ICON_ENTRY_H
#define _LIBSEXYMM_ICON_ENTRY_H

#include <glibmm.h>

/**
 * @file libsexymm/icon-entry.h Icon entry widget
 *
 * @Copyright (C) 2004-2005 Christian Hammond.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA  02111-1307, USA.
 */

#include <gtkmm/entry.h>
#include <gtkmm/image.h>
#include <sexy-icon-entry.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _SexyIconEntry SexyIconEntry;
typedef struct _SexyIconEntryClass SexyIconEntryClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Sexy
{ class IconEntry_Class; } // namespace Sexy
namespace Sexy
{


/** @addtogroup libsexymmEnums Enums and Flags */

/**
 * @ingroup libsexymmEnums
 */
enum IconEntryPosition
{
  ICON_ENTRY_PRIMARY,
  ICON_ENTRY_SECONDARY
};

} // namespace Sexy


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Glib
{

template <>
class Value<Sexy::IconEntryPosition> : public Glib::Value_Enum<Sexy::IconEntryPosition>
{
public:
  static GType value_type() G_GNUC_CONST;
};

} // namespace Glib
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Sexy
{


class IconEntry
	: public Gtk::Entry
{
	public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  typedef IconEntry CppObjectType;
  typedef IconEntry_Class CppClassType;
  typedef SexyIconEntry BaseObjectType;
  typedef SexyIconEntryClass BaseClassType;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

  virtual ~IconEntry();

#ifndef DOXYGEN_SHOULD_SKIP_THIS

private:
  friend class IconEntry_Class;
  static CppClassType iconentry_class_;

  // noncopyable
  IconEntry(const IconEntry&);
  IconEntry& operator=(const IconEntry&);

protected:
  explicit IconEntry(const Glib::ConstructParams& construct_params);
  explicit IconEntry(SexyIconEntry* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;
  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GtkObject.
  SexyIconEntry*       gobj()       { return reinterpret_cast<SexyIconEntry*>(gobject_); }

  ///Provides access to the underlying C GtkObject.
  const SexyIconEntry* gobj() const { return reinterpret_cast<SexyIconEntry*>(gobject_); }


public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::
  virtual void on_icon_pressed(IconEntryPosition icon_pos, int button);
  virtual void on_icon_released(IconEntryPosition icon_pos, int button);


private:

	
public:
	IconEntry();

	
  void set_icon(IconEntryPosition icon_pos, Gtk::Image* icon);
	
  void set_icon(IconEntryPosition icon_pos, Gtk::Image& icon);
	
  const Gtk::Image* get_icon(IconEntryPosition icon_pos) const;

	
  void set_icon_highlight(IconEntryPosition icon_pos, bool highlight);
	
  bool get_icon_highlight(IconEntryPosition icon_pos);
	
  void add_clear_button();

	
  Glib::SignalProxy2< void,IconEntryPosition,int > signal_icon_pressed();

	
  Glib::SignalProxy2< void,IconEntryPosition,int > signal_icon_released();


};

} /* namespace Sexy */

// vim: syntax=cpp

namespace Glib
{
  /** @relates Sexy::IconEntry
   * @param object The C instance
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   */
  Sexy::IconEntry* wrap(SexyIconEntry* object, bool take_copy = false);
}
#endif /* _LIBSEXYMM_ICON_ENTRY_H */

