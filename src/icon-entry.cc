// Generated by gtkmmproc -- DO NOT MODIFY!

#include <libsexymm/icon-entry.h>
#include <libsexymm/private/icon-entry_p.h>

#include <libsexy/sexy-enum-types.h>
/**
 * @file libsexymm/icon-entry.cc Icon entry widget
 *
 * @Copyright (C) 2004-2005 Christian Hammond.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA  02111-1307, USA.
 */

namespace Sexy
{

} /* namespace Sexy */


namespace
{

void IconEntry_signal_icon_pressed_callback(SexyIconEntry* self, SexyIconEntryPosition icon_pos,int button,void* data)
{
  using namespace Sexy;
  typedef sigc::slot< void,IconEntryPosition,int > SlotType;

  // Do not try to call a signal on a disassociated wrapper.
  if(Glib::ObjectBase::_get_current_wrapper((GObject*) self))
  {
    try
    {
      if(sigc::slot_base *const slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(((IconEntryPosition)(icon_pos))
, button);
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
  }
}

const Glib::SignalProxyInfo IconEntry_signal_icon_pressed_info =
{
  "icon_pressed",
  (GCallback) &IconEntry_signal_icon_pressed_callback,
  (GCallback) &IconEntry_signal_icon_pressed_callback
};


void IconEntry_signal_icon_released_callback(SexyIconEntry* self, SexyIconEntryPosition icon_pos,int button,void* data)
{
  using namespace Sexy;
  typedef sigc::slot< void,IconEntryPosition,int > SlotType;

  // Do not try to call a signal on a disassociated wrapper.
  if(Glib::ObjectBase::_get_current_wrapper((GObject*) self))
  {
    try
    {
      if(sigc::slot_base *const slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(((IconEntryPosition)(icon_pos))
, button);
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
  }
}

const Glib::SignalProxyInfo IconEntry_signal_icon_released_info =
{
  "icon_released",
  (GCallback) &IconEntry_signal_icon_released_callback,
  (GCallback) &IconEntry_signal_icon_released_callback
};

} // anonymous namespace

// static
GType Glib::Value<Sexy::IconEntryPosition>::value_type()
{
  return sexy_icon_entry_position_get_type();
}


namespace Glib
{

Sexy::IconEntry* wrap(SexyIconEntry* object, bool take_copy)
{
  return dynamic_cast<Sexy::IconEntry *> (Glib::wrap_auto ((GObject*)(object), take_copy));
}

} /* namespace Glib */

namespace Sexy
{


/* The *_Class implementation: */

const Glib::Class& IconEntry_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &IconEntry_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(sexy_icon_entry_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  Gtk::Editable::add_interface(get_type());
  }

  return *this;
}

void IconEntry_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);

  klass->icon_pressed = &icon_pressed_callback;
  klass->icon_released = &icon_released_callback;
}


void IconEntry_Class::icon_pressed_callback(SexyIconEntry* self, SexyIconEntryPosition icon_pos, int button)
{
  CppObjectType *const obj = dynamic_cast<CppObjectType*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj && obj->is_derived_())
  {
    try // Trap C++ exceptions which would normally be lost because this is a C callback.
    {
      // Call the virtual member method, which derived classes might override.
      obj->on_icon_pressed(((IconEntryPosition)(icon_pos))
, button);
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
  }
  else
  {
    BaseClassType *const base = static_cast<BaseClassType*>(
        g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
    );

    // Call the original underlying C function:
    if(base && base->icon_pressed)
      (*base->icon_pressed)(self, icon_pos, button);
  }
}

void IconEntry_Class::icon_released_callback(SexyIconEntry* self, SexyIconEntryPosition icon_pos, int button)
{
  CppObjectType *const obj = dynamic_cast<CppObjectType*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj && obj->is_derived_())
  {
    try // Trap C++ exceptions which would normally be lost because this is a C callback.
    {
      // Call the virtual member method, which derived classes might override.
      obj->on_icon_released(((IconEntryPosition)(icon_pos))
, button);
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
  }
  else
  {
    BaseClassType *const base = static_cast<BaseClassType*>(
        g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
    );

    // Call the original underlying C function:
    if(base && base->icon_released)
      (*base->icon_released)(self, icon_pos, button);
  }
}


Glib::ObjectBase* IconEntry_Class::wrap_new(GObject* o)
{
  return manage(new IconEntry((SexyIconEntry*)(o)));

}


/* The implementation: */

IconEntry::IconEntry(const Glib::ConstructParams& construct_params)
:
  Gtk::Entry(construct_params)
{
  }

IconEntry::IconEntry(SexyIconEntry* castitem)
:
  Gtk::Entry((GtkEntry*)(castitem))
{
  }

IconEntry::~IconEntry()
{
  destroy_();
}

IconEntry::CppClassType IconEntry::iconentry_class_; // initialize static member

GType IconEntry::get_type()
{
  return iconentry_class_.init().get_type();
}

GType IconEntry::get_base_type()
{
  return sexy_icon_entry_get_type();
}


IconEntry::IconEntry()
:
  Glib::ObjectBase(0), //Mark this class as gtkmmproc-generated, rather than a custom class, to allow vfunc optimisations.
  Gtk::Entry(Glib::ConstructParams(iconentry_class_.init()))
{
  }

void IconEntry::set_icon(IconEntryPosition icon_pos, Gtk::Image* icon)
{
  sexy_icon_entry_set_icon(gobj(), ((SexyIconEntryPosition)(icon_pos)), (GtkImage*)Glib::unwrap(icon));
}

void IconEntry::set_icon(IconEntryPosition icon_pos, Gtk::Image& icon)
{
  sexy_icon_entry_set_icon(gobj(), ((SexyIconEntryPosition)(icon_pos)), (icon).gobj());
}

const Gtk::Image* IconEntry::get_icon(IconEntryPosition icon_pos) const
{
  return Glib::wrap(sexy_icon_entry_get_icon(const_cast<SexyIconEntry*>(gobj()), ((SexyIconEntryPosition)(icon_pos))));
}

void IconEntry::set_icon_highlight(IconEntryPosition icon_pos, bool highlight)
{
  sexy_icon_entry_set_icon_highlight(gobj(), ((SexyIconEntryPosition)(icon_pos)), static_cast<int>(highlight));
}

bool IconEntry::get_icon_highlight(IconEntryPosition icon_pos)
{
  return sexy_icon_entry_get_icon_highlight(gobj(), ((SexyIconEntryPosition)(icon_pos)));
}

void IconEntry::add_clear_button()
{
  sexy_icon_entry_add_clear_button(gobj());
}


Glib::SignalProxy2< void,IconEntryPosition,int > IconEntry::signal_icon_pressed()
{
  return Glib::SignalProxy2< void,IconEntryPosition,int >(this, &IconEntry_signal_icon_pressed_info);
}

Glib::SignalProxy2< void,IconEntryPosition,int > IconEntry::signal_icon_released()
{
  return Glib::SignalProxy2< void,IconEntryPosition,int >(this, &IconEntry_signal_icon_released_info);
}


void Sexy::IconEntry::on_icon_pressed(IconEntryPosition icon_pos, int button)
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->icon_pressed)
    (*base->icon_pressed)(gobj(),((SexyIconEntryPosition)(icon_pos)),button);
}

void Sexy::IconEntry::on_icon_released(IconEntryPosition icon_pos, int button)
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->icon_released)
    (*base->icon_released)(gobj(),((SexyIconEntryPosition)(icon_pos)),button);
}


} // namespace Sexy


